// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`expect Department Snapshot expect AddDepartmentModal Snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <addDepartmentModal
    errors={Object {}}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <button
          className="btn btn-info mt-1 mb-1"
          onClick={[Function]}
>
          Add Department +
</button>,
        <Modal
          autoFocus={true}
          backdrop={true}
          backdropTransition={
                    Object {
                              "mountOnEnter": true,
                              "timeout": 150,
                            }
          }
          centered={false}
          fade={true}
          isOpen={false}
          keyboard={true}
          modalTransition={
                    Object {
                              "timeout": 300,
                            }
          }
          onClosed={[Function]}
          onOpened={[Function]}
          returnFocusAfterClose={true}
          role="dialog"
          scrollable={false}
          toggle={[Function]}
          unmountOnClose={true}
          zIndex={1050}
>
          <div
                    className="modal-header"
          >
                    Add Department
          </div>
          <div
                    className="modal-body"
          >
                    <div
                              className="form-group"
                    >
                              <input
                                        className="form-control"
                                        name="name"
                                        onChange={[Function]}
                                        placeholder="Department Name"
                                        type="name"
                              />
                    </div>
          </div>
          <div
                    className="modal-footer"
          >
                    <button
                              className="btn btn-primary mr-1"
                              onClick={[Function]}
                    >
                              Add Department
                    </button>
                    <button
                              className="btn btn-warning"
                              onClick={[Function]}
                    >
                              cancel
                    </button>
          </div>
</Modal>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Add Department +",
          "className": "btn btn-info mt-1 mb-1",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Add Department +",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "autoFocus": true,
          "backdrop": true,
          "backdropTransition": Object {
            "mountOnEnter": true,
            "timeout": 150,
          },
          "centered": false,
          "children": Array [
            <div
              className="modal-header"
>
              Add Department
</div>,
            <div
              className="modal-body"
>
              <div
                            className="form-group"
              >
                            <input
                                          className="form-control"
                                          name="name"
                                          onChange={[Function]}
                                          placeholder="Department Name"
                                          type="name"
                            />
              </div>
</div>,
            <div
              className="modal-footer"
>
              <button
                            className="btn btn-primary mr-1"
                            onClick={[Function]}
              >
                            Add Department
              </button>
              <button
                            className="btn btn-warning"
                            onClick={[Function]}
              >
                            cancel
              </button>
</div>,
          ],
          "fade": true,
          "isOpen": false,
          "keyboard": true,
          "modalTransition": Object {
            "timeout": 300,
          },
          "onClosed": [Function],
          "onOpened": [Function],
          "returnFocusAfterClose": true,
          "role": "dialog",
          "scrollable": false,
          "toggle": [Function],
          "unmountOnClose": true,
          "zIndex": 1050,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Add Department",
              "className": "modal-header",
            },
            "ref": null,
            "rendered": "Add Department",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="form-group"
>
                <input
                                className="form-control"
                                name="name"
                                onChange={[Function]}
                                placeholder="Department Name"
                                type="name"
                />
</div>,
              "className": "modal-body",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <input
                    className="form-control"
                    name="name"
                    onChange={[Function]}
                    placeholder="Department Name"
                    type="name"
/>,
                  undefined,
                ],
                "className": "form-group",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "form-control",
                    "name": "name",
                    "onChange": [Function],
                    "placeholder": "Department Name",
                    "type": "name",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                undefined,
              ],
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <button
                  className="btn btn-primary mr-1"
                  onClick={[Function]}
>
                  Add Department
</button>,
                <button
                  className="btn btn-warning"
                  onClick={[Function]}
>
                  cancel
</button>,
              ],
              "className": "modal-footer",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Add Department",
                  "className": "btn btn-primary mr-1",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Add Department",
                "type": "button",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "cancel",
                  "className": "btn btn-warning",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "cancel",
                "type": "button",
              },
            ],
            "type": "div",
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="btn btn-info mt-1 mb-1"
            onClick={[Function]}
>
            Add Department +
</button>,
          <Modal
            autoFocus={true}
            backdrop={true}
            backdropTransition={
                        Object {
                                    "mountOnEnter": true,
                                    "timeout": 150,
                                  }
            }
            centered={false}
            fade={true}
            isOpen={false}
            keyboard={true}
            modalTransition={
                        Object {
                                    "timeout": 300,
                                  }
            }
            onClosed={[Function]}
            onOpened={[Function]}
            returnFocusAfterClose={true}
            role="dialog"
            scrollable={false}
            toggle={[Function]}
            unmountOnClose={true}
            zIndex={1050}
>
            <div
                        className="modal-header"
            >
                        Add Department
            </div>
            <div
                        className="modal-body"
            >
                        <div
                                    className="form-group"
                        >
                                    <input
                                                className="form-control"
                                                name="name"
                                                onChange={[Function]}
                                                placeholder="Department Name"
                                                type="name"
                                    />
                        </div>
            </div>
            <div
                        className="modal-footer"
            >
                        <button
                                    className="btn btn-primary mr-1"
                                    onClick={[Function]}
                        >
                                    Add Department
                        </button>
                        <button
                                    className="btn btn-warning"
                                    onClick={[Function]}
                        >
                                    cancel
                        </button>
            </div>
</Modal>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Add Department +",
            "className": "btn btn-info mt-1 mb-1",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Add Department +",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "autoFocus": true,
            "backdrop": true,
            "backdropTransition": Object {
              "mountOnEnter": true,
              "timeout": 150,
            },
            "centered": false,
            "children": Array [
              <div
                className="modal-header"
>
                Add Department
</div>,
              <div
                className="modal-body"
>
                <div
                                className="form-group"
                >
                                <input
                                                className="form-control"
                                                name="name"
                                                onChange={[Function]}
                                                placeholder="Department Name"
                                                type="name"
                                />
                </div>
</div>,
              <div
                className="modal-footer"
>
                <button
                                className="btn btn-primary mr-1"
                                onClick={[Function]}
                >
                                Add Department
                </button>
                <button
                                className="btn btn-warning"
                                onClick={[Function]}
                >
                                cancel
                </button>
</div>,
            ],
            "fade": true,
            "isOpen": false,
            "keyboard": true,
            "modalTransition": Object {
              "timeout": 300,
            },
            "onClosed": [Function],
            "onOpened": [Function],
            "returnFocusAfterClose": true,
            "role": "dialog",
            "scrollable": false,
            "toggle": [Function],
            "unmountOnClose": true,
            "zIndex": 1050,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Add Department",
                "className": "modal-header",
              },
              "ref": null,
              "rendered": "Add Department",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="form-group"
>
                  <input
                                    className="form-control"
                                    name="name"
                                    onChange={[Function]}
                                    placeholder="Department Name"
                                    type="name"
                  />
</div>,
                "className": "modal-body",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <input
                      className="form-control"
                      name="name"
                      onChange={[Function]}
                      placeholder="Department Name"
                      type="name"
/>,
                    undefined,
                  ],
                  "className": "form-group",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "form-control",
                      "name": "name",
                      "onChange": [Function],
                      "placeholder": "Department Name",
                      "type": "name",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  undefined,
                ],
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <button
                    className="btn btn-primary mr-1"
                    onClick={[Function]}
>
                    Add Department
</button>,
                  <button
                    className="btn btn-warning"
                    onClick={[Function]}
>
                    cancel
</button>,
                ],
                "className": "modal-footer",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Add Department",
                    "className": "btn btn-primary mr-1",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Add Department",
                  "type": "button",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "cancel",
                    "className": "btn btn-warning",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "cancel",
                  "type": "button",
                },
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`expect Department Snapshot expect DepartmentItem Snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DepartmentItem
    departments={Array []}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <thead>
          <tr>
                    <th>
                              ID
                    </th>
                    <th>
                              Department name
                    </th>
                    <th>
                              Actions
                    </th>
          </tr>
</thead>,
        <tbody>
          
</tbody>,
      ],
      "className": "table",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <tr>
            <th>
                        ID
            </th>
            <th>
                        Department name
            </th>
            <th>
                        Actions
            </th>
</tr>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <th>
                ID
</th>,
              <th>
                Department name
</th>,
              <th>
                Actions
</th>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "ID",
              },
              "ref": null,
              "rendered": "ID",
              "type": "th",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Department name",
              },
              "ref": null,
              "rendered": "Department name",
              "type": "th",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Actions",
              },
              "ref": null,
              "rendered": "Actions",
              "type": "th",
            },
          ],
          "type": "tr",
        },
        "type": "thead",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [],
        },
        "ref": null,
        "rendered": Array [],
        "type": "tbody",
      },
    ],
    "type": "table",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <thead>
            <tr>
                        <th>
                                    ID
                        </th>
                        <th>
                                    Department name
                        </th>
                        <th>
                                    Actions
                        </th>
            </tr>
</thead>,
          <tbody>
            
</tbody>,
        ],
        "className": "table",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <tr>
              <th>
                            ID
              </th>
              <th>
                            Department name
              </th>
              <th>
                            Actions
              </th>
</tr>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <th>
                  ID
</th>,
                <th>
                  Department name
</th>,
                <th>
                  Actions
</th>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "ID",
                },
                "ref": null,
                "rendered": "ID",
                "type": "th",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Department name",
                },
                "ref": null,
                "rendered": "Department name",
                "type": "th",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Actions",
                },
                "ref": null,
                "rendered": "Actions",
                "type": "th",
              },
            ],
            "type": "tr",
          },
          "type": "thead",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [],
          },
          "ref": null,
          "rendered": Array [],
          "type": "tbody",
        },
      ],
      "type": "table",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`expect Department Snapshot expect EditDepartmentModal Snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EditModal
    errors={Object {}}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Modal
        autoFocus={true}
        backdrop={true}
        backdropTransition={
                Object {
                        "mountOnEnter": true,
                        "timeout": 150,
                      }
        }
        centered={false}
        fade={true}
        isOpen={false}
        keyboard={true}
        modalTransition={
                Object {
                        "timeout": 300,
                      }
        }
        onClosed={[Function]}
        onOpened={[Function]}
        returnFocusAfterClose={true}
        role="dialog"
        scrollable={false}
        toggle={[Function]}
        unmountOnClose={true}
        zIndex={1050}
>
        <div
                className="modal-header"
        >
                Edit Department
        </div>
        <div
                className="modal-body"
        >
                <div
                        className="form-group"
                >
                        <input
                                className="form-control"
                                name="name"
                                onChange={[Function]}
                                placeholder="Department Name"
                                type="name"
                                value={undefined}
                        />
                </div>
        </div>
        <div
                className="modal-footer"
        >
                <button
                        className="btn btn-primary"
                        onClick={[Function]}
                >
                        Edit
                </button>
                 
                <button
                        className="btn btn-warning"
                        onClick={[Function]}
                >
                        Cancel
                </button>
        </div>
</Modal>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "autoFocus": true,
        "backdrop": true,
        "backdropTransition": Object {
          "mountOnEnter": true,
          "timeout": 150,
        },
        "centered": false,
        "children": Array [
          <div
            className="modal-header"
>
            Edit Department
</div>,
          <div
            className="modal-body"
>
            <div
                        className="form-group"
            >
                        <input
                                    className="form-control"
                                    name="name"
                                    onChange={[Function]}
                                    placeholder="Department Name"
                                    type="name"
                                    value={undefined}
                        />
            </div>
</div>,
          <div
            className="modal-footer"
>
            <button
                        className="btn btn-primary"
                        onClick={[Function]}
            >
                        Edit
            </button>
             
            <button
                        className="btn btn-warning"
                        onClick={[Function]}
            >
                        Cancel
            </button>
</div>,
        ],
        "fade": true,
        "isOpen": false,
        "keyboard": true,
        "modalTransition": Object {
          "timeout": 300,
        },
        "onClosed": [Function],
        "onOpened": [Function],
        "returnFocusAfterClose": true,
        "role": "dialog",
        "scrollable": false,
        "toggle": [Function],
        "unmountOnClose": true,
        "zIndex": 1050,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Edit Department",
            "className": "modal-header",
          },
          "ref": null,
          "rendered": "Edit Department",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="form-group"
>
              <input
                            className="form-control"
                            name="name"
                            onChange={[Function]}
                            placeholder="Department Name"
                            type="name"
                            value={undefined}
              />
</div>,
            "className": "modal-body",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <input
                  className="form-control"
                  name="name"
                  onChange={[Function]}
                  placeholder="Department Name"
                  type="name"
                  value={undefined}
/>,
                undefined,
              ],
              "className": "form-group",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "form-control",
                  "name": "name",
                  "onChange": [Function],
                  "placeholder": "Department Name",
                  "type": "name",
                  "value": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              undefined,
            ],
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="btn btn-primary"
                onClick={[Function]}
>
                Edit
</button>,
              " ",
              <button
                className="btn btn-warning"
                onClick={[Function]}
>
                Cancel
</button>,
            ],
            "className": "modal-footer",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Edit",
                "className": "btn btn-primary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Edit",
              "type": "button",
            },
            " ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Cancel",
                "className": "btn btn-warning",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Cancel",
              "type": "button",
            },
          ],
          "type": "div",
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Modal
          autoFocus={true}
          backdrop={true}
          backdropTransition={
                    Object {
                              "mountOnEnter": true,
                              "timeout": 150,
                            }
          }
          centered={false}
          fade={true}
          isOpen={false}
          keyboard={true}
          modalTransition={
                    Object {
                              "timeout": 300,
                            }
          }
          onClosed={[Function]}
          onOpened={[Function]}
          returnFocusAfterClose={true}
          role="dialog"
          scrollable={false}
          toggle={[Function]}
          unmountOnClose={true}
          zIndex={1050}
>
          <div
                    className="modal-header"
          >
                    Edit Department
          </div>
          <div
                    className="modal-body"
          >
                    <div
                              className="form-group"
                    >
                              <input
                                        className="form-control"
                                        name="name"
                                        onChange={[Function]}
                                        placeholder="Department Name"
                                        type="name"
                                        value={undefined}
                              />
                    </div>
          </div>
          <div
                    className="modal-footer"
          >
                    <button
                              className="btn btn-primary"
                              onClick={[Function]}
                    >
                              Edit
                    </button>
                     
                    <button
                              className="btn btn-warning"
                              onClick={[Function]}
                    >
                              Cancel
                    </button>
          </div>
</Modal>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "autoFocus": true,
          "backdrop": true,
          "backdropTransition": Object {
            "mountOnEnter": true,
            "timeout": 150,
          },
          "centered": false,
          "children": Array [
            <div
              className="modal-header"
>
              Edit Department
</div>,
            <div
              className="modal-body"
>
              <div
                            className="form-group"
              >
                            <input
                                          className="form-control"
                                          name="name"
                                          onChange={[Function]}
                                          placeholder="Department Name"
                                          type="name"
                                          value={undefined}
                            />
              </div>
</div>,
            <div
              className="modal-footer"
>
              <button
                            className="btn btn-primary"
                            onClick={[Function]}
              >
                            Edit
              </button>
               
              <button
                            className="btn btn-warning"
                            onClick={[Function]}
              >
                            Cancel
              </button>
</div>,
          ],
          "fade": true,
          "isOpen": false,
          "keyboard": true,
          "modalTransition": Object {
            "timeout": 300,
          },
          "onClosed": [Function],
          "onOpened": [Function],
          "returnFocusAfterClose": true,
          "role": "dialog",
          "scrollable": false,
          "toggle": [Function],
          "unmountOnClose": true,
          "zIndex": 1050,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Edit Department",
              "className": "modal-header",
            },
            "ref": null,
            "rendered": "Edit Department",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="form-group"
>
                <input
                                className="form-control"
                                name="name"
                                onChange={[Function]}
                                placeholder="Department Name"
                                type="name"
                                value={undefined}
                />
</div>,
              "className": "modal-body",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <input
                    className="form-control"
                    name="name"
                    onChange={[Function]}
                    placeholder="Department Name"
                    type="name"
                    value={undefined}
/>,
                  undefined,
                ],
                "className": "form-group",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "form-control",
                    "name": "name",
                    "onChange": [Function],
                    "placeholder": "Department Name",
                    "type": "name",
                    "value": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                undefined,
              ],
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <button
                  className="btn btn-primary"
                  onClick={[Function]}
>
                  Edit
</button>,
                " ",
                <button
                  className="btn btn-warning"
                  onClick={[Function]}
>
                  Cancel
</button>,
              ],
              "className": "modal-footer",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Edit",
                  "className": "btn btn-primary",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Edit",
                "type": "button",
              },
              " ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Cancel",
                  "className": "btn btn-warning",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Cancel",
                "type": "button",
              },
            ],
            "type": "div",
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
